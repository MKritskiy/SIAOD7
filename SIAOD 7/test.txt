РЕФЕРАТ
Отчет 48 с., 27 рис., 0 табл., 3 лист., 21источн., 1прил.
ИНТЕРНЕТ, ИСХОДНЫЙ КОД, ИНТЕРНЕТ-РЕСУРС, ПРОГНОЗ, ПОГОДА, АДАПТИВНОСТЬ, РЕНДЕР.
Объект исследования – визуальное представление погодных данных в сети интернет.
Предмет исследования – интернет-ресурс «Погода», предоставляющий данные о погоде.
Цель работы – разработка и апробация интернет ресурса «Погода».
В ходе работы был проведен краткий анализ предметной области и обзор различных сайтов погодных сервисов.
Методом сравнительного анализа определены перспективные решения, позволяющие выработать уникальный стиль и функционал интернет-ресурса «Погода». Рассмотрен процесс создания сайта, используемый программный инструментарий и среда разработки.
Результатом работы является интернет-ресурс, предоставляющий реальные погодные данные за различные периоды времени.
Разработанный интернет-ресурс можно использовать для получения прогноза погоды. 
СОДЕРЖАНИЕ
РЕФЕРАТ	3
СОДЕРЖАНИЕ	4
ТЕРМИНЫ И ОПРЕДЕЛЕНИЯ	5
ВВЕДЕНИЕ	6
1. ОБЩИЕ СВЕДЕНИЯ	7
1.1 Наименование клиентской части интернет-ресурса	7
1.2 Функциональное назначение	7
1.3 Прикладное программное обеспечение	7
2. ОПИСАНИЕ ЛОГИЧЕСКОЙ СТРУКТУРЫ ИНТЕРНЕТ-РЕСУРСА	9
2.1 Анализ предметной области интернет-ресурса	9
2.2 Выбор технологий разработки клиентской части интернет-ресурса	9
2.3 Создание веб-страниц клиентской части интернет ресурса с использованием технологий HTML5, CSS3 и JavaScript	9
2.3.1 Главная страница	9
2.3.2 Страница «Сейчас»	13
2.3.3 Страница «Две недели»	15
2.3.4 Страница «Месяц»	16
2.3.5 Страница «Контакты»	17
2.4 Создание межстраничной навигации	18
2.5 Реализация клиентской логики веб-страниц с применением технологии JavaScript	20
2.5.2 Планирование функциональности	20
2.5.1 Клиентская логика страницы «Сегодня»	21
2.5.2 Клиентская логика страницы «Две недели»	24
2.5.3 Клиентская часть страницы «Месяц»	27
2.5.4 Клиентская часть дополнительных элементов	28
3 ОПТИМИЗАЦИЯ КЛИЕНТСКОЙ ЧАСТИ ИНТЕРНЕТ-РЕСУРСА	31
ЗАКЛЮЧЕНИЕ	37
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ	38
ПРИЛОЖЕНИЕ А	39

ТЕРМИНЫ И ОПРЕДЕЛЕНИЯ
В настоящем отчете применяют следующие термины с соответствующими определениями.
Браузер		прикладное программное обеспечение для просмотра страниц, содержания веб-документов, компьютерных файлов и их каталогов; управления веб-приложениями; а также для решения других задач
Интернет-ресурс		совокупность интегрированных программно-аппаратных и технических средств, а также информации, предназначенной для публикации в сети Интернет
Транспонированная сетка		это сетка, в которой произведена замена строк на столбцы на мобильном устройстве 
Меню-бургер		элемент скрытой навигации, который скрывает традиционное меню интернет ресурса при изменении разрешения экрана
Адаптивность		это способность сайта «подстраиваться» под различные технические условия
Рендер		(англ. «Визуализация) это процесс создания финального внешнего вида на основе совокупности данных из различных функций

ВВЕДЕНИЕ
Интернет – одно из самых выдающихся изобретений человечества. Представить современную жизнь без него очень трудно. Сегодня это основной источник информации для большинства людей. Число интернет-ресурсов растет с каждым днем. Поэтому технологии разработки и возможности дизайна сайтов постоянно совершенствуются. А чтобы сайт был интуитивно понятным, приятным для глаз и приносил удовольствие пользователю, необходимо тщательно продумать логику его работы и его дизайн.
Сайт погоды – это интернет-ресурс, предназначенный для получения актуальных данных о погодных условиях. Нам всегда хочется знать прогноз погоды. Это помогает понять, что стоит надеть, если выхода на улицу не избежать. Также, это помогает не допустить проблем со здоровьем, которые возникают при значительной смене температуры или атмосферного давления. Гораздо удобнее узнать, что нас ждет на улице, через интернет. 
Цель данной курсовой работы состоит в разработке клиентской части интернет-ресурса «Погода на месяц» с использованием технологий HTML5, CSS3 и JavaScript. В ходе работы были использованы знания, полученные на лекциях и практических занятиях курса, а также информация из открытых источников.
В результате выполнения работы был разработан сайт, содержащий современный и интуитивно понятный дизайн, который позволяет сосредоточиться на главной информации, а также без проблем совершать навигацию по ресурсу.
1. ОБЩИЕ СВЕДЕНИЯ
1.1 Наименование клиентской части интернет-ресурса
Название интернет-ресурса было выбрано исходя из его назначения. Наиболее подходящим при таком подходе оказалось наиболее очевидное – «Погода». Это название четко дает понять пользователю назначение и содержание данного сайта.
1.2 Функциональное назначение
Созданный интернет ресурс имеет информационный характер и используется, чтобы преподнести материал о погодных прогнозах. Данная тема была выбрана исходя из того, что в современном мире мы каждый день интересуемся погодой. Однако, большинство погодных сервисов имеют устаревший дизайн или содержат огромное количество лишней информации, что не позволяет пользователям оперативно получить интересующий их прогноз. В данной работе будет использоваться поиск в массиве данных о погоде за определенный период времени. Исходя из всего вышесказанного, можно удостовериться в актуальности данной работы.
Интернет-ресурс предназначен для использования на различных устройствах и в разных браузерах, поэтому в ходе разработки было уделено много внимания комфорту пользователей на любых видах устройств. Была реализована адаптивность. Поэтому созданный сайт доступен для ознакомления и комфортного использования с девайсов с любым разрешением и соотношением сторон.
1.3 Прикладное программное обеспечение
На этапе планирования были выбраны технологии проектирования. В первую очередь необходимо выбрать редактор кода.
Для работы с исходным кодом был выбран редактор Visual Studio Code. Это бесплатное программное обеспечение от Microsoft для Windows, Linux, macOS, Его преимущество состоит в удобном файловом менеджменте, возможности загружать различные модификации и работе с файлами html, css и js без использования сторонних программ. Это обеспечивает быструю и удобную работу без лишних затрат времени. Для тестирования работы сайта были использованы браузеры Goggle Chrome, Yandex, Microsoft Edge и Safari. Основная отладка велась в браузере Goggle Chrome с помощью встроенных элементов и на мобильном устройстве проверялась адаптивность.
2. ОПИСАНИЕ ЛОГИЧЕСКОЙ СТРУКТУРЫ ИНТЕРНЕТ-РЕСУРСА
2.1 Анализ предметной области интернет-ресурса
Данный сайт подразумевает в первую очередь наличие прогноза погоды. Этот ресурс будет полезен тем, кто заинтересован в быстром получении только самой главной информации о предстоящей погоде. На нем используется информация из внешнего источника для определения погоды на ближайшие 12 часов, две недели и на ближайший месяц. Это самые востребованные периоды времени для прогнозов.
Дизайн разработан в соответствии с направленностью сайта. Использованы изображения, цвета, которые ассоциируются с погодой и хорошо перекликаются на всех страницах интернет-ресурса. Сайт содержит 3 страницы с прогнозами погоды, одну главную страницу и страницу, содержащую контактную информацию. Страницы названы в соответствии с их содержанием.
2.2 Выбор технологий разработки клиентской части интернет-ресурса
Для разработки интернет-ресурса был использованы html – язык гипертекстовой разметки, поддерживаемый всеми браузерами, и переводимый в понятный пользователю формат на сайте. Он используется для задания логических блоков и основного контента на сайте. Для оформления внешнего вида контента использовался CSS – каскадные таблицы стилей, которые помогают задать оформление для каждого элемента веб-страницы. Для реализации сложной анимации и логики использовался язык программирования JavaScript и библиотеки для него. Для отладки использовались инструменты браузера Google Chrome.
2.3 Создание веб-страниц клиентской части интернет ресурса с использованием технологий HTML5, CSS3 и JavaScript
2.3.1 Главная страница
Главная страница будет открываться при переходе на сайт. Она должна в краткой форме содержать самые важные данные со всего ресурса. В данной работе таковыми являются страницы, содержащие прогнозы. Тогда, разумно будет сделать главную страницу в виде содержания сайта (Рис. 1).
 
Рисунок 1 – Дизайн главной страницы
На данной странице содержатся карты, при наведении на одну из которых будет произведено размытие двух других карточек (Рис. 2) с помощью свойства filter: brightness(0.5) saturate(1) contrast(1.2) blur(20px) [1]. При нажатии на карточки будет произведен переход на соответствующие подписям на них страницы. Карточки отображаются в сетке с помощью свойства display: grid [2]. Фон страницы – это градиент. Такой эффект реализован с помощью свойства   background: linear-gradient(0, #286d8d, #53a6cb) [3, 4].
 
Рисунок 2 – Размытие карточек на которые не наведен курсор
Сама сетка карточек озаглавлена текстом «Погода», позволяющим понять содержание сайта.
В шапке сайта содержатся логотип сайта, при наведении на который произойдет затемнение (с помощью свойства opacity: 0.7 [5]) и уменьшение размера (с помощью свойства transform: scale(0.95) [6]), а нажатии произойдет переход на страницу «Сегодня», ссылки на остальные страницы ресурса, которые изначально затемнены с помощью opacity: 0.7 и, при наведении, приобретают свойство opacity: 1, выравненные по правому краю и являющиеся элементами списка ul[7] и кнопка с полем для поиска, которое выезжает при на ведении на кнопку (Рис. 3).
 
Рисунок 3 – Демонстрация появления поля поиска при наведении на кнопку
Также на главной странице присутствует подвал сайта. В нем должны содержаться некоторые контактные данные и наименование разработчика. Внешний вид представлен на рисунке 4.
 
Рисунок 4 – подвал интернет-ресурса «Погода»
При наведении на элементы, содержащие текст, будет произведена смена свойства со значения opacity: 0.7 на opacity: 1. При наведении на элементы с изображениями социальных сетей, будет произведена плавная анимация со сменой цвета их фона и изображения. Это реализовано с помощью свойств filter: invert(1) (при наведении filter: invert(0)), transform: translateY(-12.5%), а также псевдо элементов before и after (Рис. 5).
 
Рисунок 5 – Демонстрация действия элемента при наведении на него
Также на странице присутствует элемент уведомлений, но его реализация будет представлена позже ввиду основы принципа его работы заключаются в реализации остальных страниц.
Шапка и подвал сайта на следующих страницах изменяться не будут.
Такой дизайн позволит пользователю быстро сориентироваться при переходе на сайт, не отвлекаясь на лишнюю информацию. 
2.3.2 Страница «Сейчас»
На странице «Сегодня» будут содержаться данные о погоде на текущий момент и на ближайшие часы. Тогда, здесь расположим элементы, отображающие температуру на ближайшие часы, температуру по ощущениям, давление, влажность и скорость ветра. В оглавлении страницы будут находиться данные о городе, погода в котором отображается, погодное явление и температура в градусах Цельсия на текущий момент. 
Элемент, отображающий погоду на ближайшие часы, прокручивается в горизонтальном направлении с помощью свойства overflow-x: scroll, что позволяет уместить большее число прогнозов и получить более подробную информацию. Каждый элемент внутри блока, отображающего погоду, будет содержать время прогноза, картинку состояния погоды и температуру в градусах Цельсия.
Также необходимо стилизовать полосу прокрутки сайта, чтобы она соответствовала основному дизайн коду. Ее внешний вид будет идентичен на последующих страницах.
Все это позволяет пользователю оперативно определить текущий прогноз и, если требуется, без затруднений определить его и на ближайшие часы (Рис. 6).
 
Рисунок 6 – Внешний вид страницы «Сегодня»
Теперь можно рассказать про элемент уведомлений. При наведении мыши на него, выплывет окошко содержащее сообщение об осадках в ближайшие часы (Рис. 7). Элемент имеет свойство position: sticky [8], что позволяет ему «прилипнуть» к нижней части окна и всегда находиться в области экрана. 
Такой вид элемента уведомлений не будет отвлекать пользователя от основного содержания страницы, а при необходимости, предоставит сообщение об осадках без навязчивых индикаций и других способов оповещения.
 
Рисунок 7 – Элемент уведомлений при наведении на него курсора
2.3.3 Страница «Две недели»
На этой странице должна отображаться погода на ближайшие две недели. Это удобно сделать по аналогии с почасовой погодой на странице «Сегодня», а именно, прокруткой по горизонтали. Погода здесь будет содержать день недели и дату прогноза, картинку – состояние погоды, максимальную и минимальную температуру, причем в прогнозе на сегодня присутствует поле, уточняющее, что прогноз именно на сегодня, а также поля содержащие уточнения что является максимальной температурой, а что минимальной (Рис. 8). 
 
Рисунок 8 – Страница «Две недели»
Также на этой странице присутствует элемент, тоже доступный для горизонтальной прокрутки, в котором будет отображаться цикл восходов и заходов солнца на ближайшие две недели. Он будет содержать диаграмму, высота которой зависит от времени восхода и захода солнца. Также над и под каждым элементом диаграммы содержится время захода и восхода солнца соответственно. Дополнительно под каждым из них отображается дата и день недели прогноза. При наведении на элемент диаграммы будет отображена более подробная информация о нем (Рис. 9).
 
Рисунок 9 – Подробности, отображаемые при наведении на элемент диаграммы
И последний элемент этой страницы – аналогично двум другим, имеет возможность горизонтальной прокрутки и содержит информацию об уровне осадков на ближайшие две недели. Здесь тоже находится диаграмма, каждый элемент которой содержит под собой дату и день недели прогноза, над собой – количество осадков. При наведении мыши, отобразится более подробная информация аналогично рисунку 9. 
Такой внешний вид страницы предоставит пользователю только самую важную информацию о погоде на ближайшие две недели. Интуитивная возможность прокрутки по горизонтали позволяет без затруднений узнать прогноз и на более длительный период.
2.3.4 Страница «Месяц»
На этой странице интернет-ресурса будет отображена погода на месяц. Дабы погода была видна на весь месяц сразу, использовать и здесь прокрутку по горизонтали было бы неудобно поэтому, применив свойство flex-wrap: wrap [9], сделаем перенос элементов на новую строку в случае, если строке блока нет больше места. Так же, как и в погоде на неделю, каждый элемент прогноза состоит из дня недели, даты, типа погоды, максимальной и минимальной температур. (Рис. 10).
Такое представление страницы будет полностью соответствовать своему названию и ее содержание будет предсказуемым для пользователя.
 
Рисунок 10 – Внешний вид страницы «Погода на месяц»
2.3.5 Страница «Контакты»
Эта страница должна содержать в максимально компактной форме данные для связи. Она нужна для предоставления возможности сообщить разработчику о проблемах в работе сайта или предложить идеи по его доработке, а то и просто найти разработчика в социальных сетях.
Для вышеупомянутых целей достаточно указать почту, телефон и ссылки на социальные сети, дополнительно указав имя разработчика. Отобразить эти элементы будет удобно с помощью сетки display: grid (Рис. 11). Аналогично ссылкам в подвале, здесь будет реализована анимация смены цвета фона и самого логотипа при наведении мыши.
Таким образом, эта страница полностью соответствует своему наименованию и позволяет узнать контактные данные разработчика сайта.
 
Рисунок 11 – Внешний вид страницы «Контакты»
2.4 Создание межстраничной навигации
Для создания межстраничной навигации используется шапка сайта [10], расположенная в верхней части страницы. С ее помощью, с каждой страницы интернет-ресурса доступны все остальные. Такой подход создает комфортные условия для пользователя и позволяет не отвлекаться от основного содержания страниц (Рис. 12).
 
Рисунок 12 – Меню навигации (шапка) интернет-ресурса
Меню (шапка) содержит ссылки на остальные страницы, кнопку поиска и логотип. Дизайн меню лаконичен и направлен в первую очередь на интуитивность, функциональность и удобство пользователя.
Граф переходов по страницам с помощью меню навигации представлен на рисунке 13.
 
Рисунок 13 – Граф переходов по меню навигации
Ввиду того, что с каждой страницы можно попасть на любую другую, граф выглядит недостаточно понятным. Однако именно такая система навигации наиболее удобна пользователю.
Этот граф был построен с помощью инструмента построения графов по заданным зависимостям Graphviz Online. На рисунке 14 представлен листинг на языке graphviz [11].
 
Рисунок 14 – Переходы по меню навигации
Таким образом, реализовать удобное и интуитивное и простое меню навигации получилось. Это значительно упрощает использование сайта.
2.5 Реализация клиентской логики веб-страниц с применением технологии JavaScript
2.5.2 Планирование функциональности
Прежде всего стоит отметить, что функционал этого интернет-ресурса преимущественно реализуется на JavaScript. Поэтому необходимо предварительно составить план функциональности сайтов. Итак, основываясь на результатах предыдущих разделов данного отчета, можно сделать вывод, что наименьшим функционалом обладают страницы «Главная» и «Контакты». Взяв это во внимание, реализуем прежде всего функциональность страниц «Сегодня», «Две недели», «Месяц». Теперь необходимо определить, каким образом получать погодные данные. Для этого будем использовать бесплатный API с погодного сервиса Open-Metio [12].
2.5.1 Клиентская логика страницы «Сегодня»
Для начала необходимо реализовать получение данных из API. Для этого реализуем функцию getData. Листинг этой функции представлен на рисунке 15.
 
Рисунок 15 – Листинг кода функции getData
Далее потребуется ряд вспомогательных функций для преобразования давления в мм. рт. ст. [13], добавления единиц измерения, преобразования температуры и для вызова функций отображения.
Небольшие функции рендера названия города, температуры и описания погоды представлены в листинге на рисунке 16.
 
Рисунок 16 – Листинг функций отображения текущей погоды
Далее потребуются функция отображения деталей, таких как температура по ощущениям, давление, скорость ветра и влажность. Для ее работы удобно будет добавить вспомогательную функцию непосредственного отображения на странице вышеупомянутых деталей. Реализация этих функций указана в листинге на рисунке 17.
 
Рисунок 17 – Реализация функций отображения деталей текущей погоды
Ну и наконец главная функция – функция отображения погоды на ближайшие часы (Рис. 18).
 Рисунок 18 – Функция отображения прогноза погоды на ближайшие часы
Теперь остается только добавить периодичность вызова функции render, отображающей всю вышеупомянутую информацию.
2.5.2 Клиентская логика страницы «Две недели»
Здесь все гораздо сложнее ввиду того, что сервис, используемый для получения прогноза, предоставляет действительный прогноз лишь на неделю. По этой причине необходимо написать функцию генерации случайной погоды, основываясь на реальном прогнозе.
К вспомогательным функциям можно отнести определение средней амплитуды значений известного прогноза, получение названия дня недели и получение названия месяца. 
Вспомогательные функции со страницы «Сегодня» тоже здесь используются.
Итак, основными двумя функциями являются:
- функция отображения действительного прогноза (Рис. 19);
- функция отображения сгенерированного прогноза (Листинг А.1).
 
Рисунок 19 – Функция отображения действительного прогноза
Для отображения диаграмм удобно использовать внешнюю библиотеку Chart.js [14], которая позволяет легко визуализировать различные графики и диаграммы.
На основе этой библиотеки напишем функции отображения информации о заходах и восходах солнца. Ее тоже необходимо генерировать, ведь прогноз доступен лишь на 7 дней. Функция представлена в листинге А.2.  Потребуются также функции определяющие заходы и восходы солнца исходя из известных данных. Также необходимо добавить функцию отображения разделов и подписей сверху и снизу элементов диаграммы (Листинг на рис. 20).
 
Рисунок 20 – Отображение деталей вокруг элементов диаграммы
Идентичные функции требуются для диаграммы с данными об осадках. Их приводить здесь не будем.
И равно так же, как и на странице «Сегодня», необходимо добавить хронический вызов функций отображения.
2.5.3 Клиентская часть страницы «Месяц»
Необходимо сделать генерацию погоды на месяц. Сделать это можно аналогично функциям на странице «Погода на неделю» (Листинг А.1, рис. 19) - вычисляем среднее значение температуры известной погоды, среднюю амплитуду прогнозных значений и далее формируем усредненное предсказание.
2.5.4 Клиентская часть дополнительных элементов
К дополнительным элементам можно отнести элемент уведомлений. В нем отображается информация о том, ожидаются ли осадки. Здесь потребуются функции отображения уведомления и функция периодического вызова. Все это приведено в листинге на рисунке 21. 
Реализация меню-бургера состоит из того, что при клике на элемент checkbox [15], который представляет собой три горизонтальные черты – обозначение меню –, вызывается функция, которая задает анимацию открытия или закрытия меню (Листинг на рисунке 22).
Элементы с id “checkbox” и “back” изначально имеют свойство display: none [16], которое убирает их из потока страницы. Когда срабатывает медиа-запрос, при котором обычное меню надо менять на бургер, эти элементы получают свойство display: flex, а обычное меню - display: none.
Реализация стилей элементов для меню бургера в медиа-запросе представлена в листинге А.3.
 
Рисунок 21 – Функции реализации элемента уведомлений
 
Рисунок 22 – функция смены анимации у меню при нажатии на checkbox
3 ОПТИМИЗАЦИЯ КЛИЕНТСКОЙ ЧАСТИ ИНТЕРНЕТ-РЕСУРСА
Пользователи должны иметь возможность просматривать интернет-ресурс с различных устройств и браузеров, и при этом получать полную информацию и комфортно пользоваться сайтом. Для этого была проведена работа с адаптивностью всех страниц сайта, а также меню навигации.
В первую очередь адаптивность была задана для меню навигации. Она заключается в том, что на устройстве с шириной экрана менее 950px обычное меню превращается в меню-бургер [17], реализация которого описана в разделе 2.5.4 (Рис. 23).
 
Рисунок 23 – Меню-бургер в закрытом состоянии
При открытии меню, оно расширит область шапки сайта и расположит ее над всеми другими элементами, а внутри будет содержать ссылки на другие страницы. Это помогает избежать нагромождения элементов и обеспечивает удобную навигацию по сайту с мобильных устройств (Рис. 24).
 
Рисунок 24 – Меню-бургер в открытом состоянии
Также ввиду того, что строка поиска при нажатии на кнопку поиска может увеличиваться, а значит и вылезти за границы шапки, то при разрешении меньше 350px ее следует также убрать в меню-бургер (Рис. 25).
 
Рисунок 25 – Меню-бургер при ширине экрана меньше 350px
Контент на странице «Главная» при ширине окна менее чем 540px будет представлен в виде транспонированной сетки [18]. Это позволит поместить все карточки, не теряя их содержание, а также сделает интуитивно понятным перемещение по сайту (Рис. 26).
 
Рисунок 26 – Вид страницы «Главная» при ширине экрана меньше 540px
На странице «Погода» все устроено так, что адаптивность требуется только когда ширина экрана меньше 350px. В этом случае достаточно установить свойство font-size: 60% [19], отвечающее за размер шрифта, для всей страницы (Рис. 27).
 
Рисунок 27 – Внешний вид страницы «Сегодня» при ширине окна меньше 350px
В случае страницы «Две недели» никаких особенных изменений не требуется. Прокрутка по горизонтали позволяет не настраивать дополнительную адаптивность.
Страница «Месяц» тоже не требует никаких изменений ввиду свойства flex-wrap: wrap, которое переносит элемент на следующую строку, если он не помещается в строке блока.
Страница «Контакты» требует схожего способа транспонирования сетки, как и на странице «Главная». Также потребуется уменьшить шрифт текста.
Для подвала дополнительных изменений не требуется.
Из неупомянутых изменений можно выделить изменение размеров шапки и панели уведомлений при ширине меньшей 950 px.
Таким образом, была добавлена адаптивность для всех страниц сайта. Были использованы средства, которые помогают легко работать с адаптивностью страницы и при этом позволяют комфортно просматривать интернет-ресурс с устройств с разным разрешением. При тестировании с различным разрешением и в браузерах Google Chrome, Opera, Yandex и Microsoft Edge не было выявлено проблем с адаптивностью.
ЗАКЛЮЧЕНИЕ
В результате выполнения курсовой работы был разработан информационный интернет-ресурс на тему «Погода на месяц». Были использованы технологии HTML5, CSS3, JavaScript с учетом требований инструкции по организации и проведению курсового проектирования, использован редактор Visual Studio Code и применены технологии для создания адаптивности под различные устройства.
В соответствии с поставленными задачами, был проведен анализ предметной области, был обоснован выбор технологий разработки. Были реализованы 5 страниц с подобранным в соответствии с выбранной темой контентом, стилизованным для привлечения внимания пользователя. Для их создания использовались технологии HTML5, CSS3 и JavaScript. Была организована межстраничная навигация с помощью меню, которое предоставляет доступ с каждой страницы на все остальные. Был реализован слой клиентской логики с применением JavaScript и библиотек для него, который позволил улучшить функциональность и комфорт использования сайта.  Все веб-страницы были адаптированы для устройств с различным разрешением экрана, что позволяет комфортно использовать сайт и получать всю необходимую информацию не только с компьютера. 
Тестирование адаптивности проходило в браузерах Google Chrome, Yandex, Microsoft Edge и Safari [21], а также на мобильном устройстве после загрузки на хостинг. В ходе тестирования проблем не выявлено, весь контент отображается корректно, навигация работает. 
Созданный интернет-ресурс был загружен на бесплатный хостинг, который предоставляет github. Исходный код интернет-ресурса по курсовой работе доступен по ссылке – https://mkritskiy.github.io/Weather
Доменный доступ к интернет-ресурсу для просмотра на любых устройствах и в любых браузерах доступен по ссылке – https://mkritskiy.github.io/Weather/main.html
СПИСОК ИСПОЛЬЗОВАННЫХ ИСТОЧНИКОВ
1. mdn web docs: filter. – URL: https://developer.mozilla.org/en-US/docs/Web/CSS/filter (дата обращения: 26.10.2022)
2. mdn web docs: Basic concepts of grid layout. – URL:  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout (дата обращения: 01.12.2022).
3. mdn web docs: background-color. – URL: https://developer.mozilla.org/ru/docs/Web/CSS/background-color (дата обращения: 15.10.2022).
4. mdn web docs: linear-gradient. – URL:  https://developer.mozilla.org/en-US/docs/Web/CSS/gradient/linear-gradient (дата обращения: 15.10.2022).
5. htmlbook: opacity. – URL: http://htmlbook.ru/css/opacity (дата обращения: 15.10.2022).
6. mdn web docs: transfrom. – URL: https://developer.mozilla.org/ru/docs/Web/CSS/transform (дата обращения: 21.10.2022).
7.  mdn web docs: ul. – URL: https://developer.mozilla.org/ru/docs/Web/HTML/Element/ul (дата обращения: 05.10.2022).
8. mdn web docs: overflow-x. – URL: https://developer.mozilla.org/en-US/docs/Web/CSS/overflow-x (дата обращения: 18.10.2022).
9. mdn web docs: position. – URL: https://developer.mozilla.org/ru/docs/Web/CSS/position (дата обращения: 14.10.2022).
10. mdn web docs: flex-wrap. – URL: https://developer.mozilla.org/en-US/docs/Web/CSS/flex-wrap (дата обращения: 15.11.2022).
11. Хабр: Проектирование заголовочных частей сайтов с использованием CSS Flexbox. – URL:  https://habr.com/ru/company/ruvds/blog/518514/ (дата обращения: 01.11.2022).
12. Graphviz. – URL: https://graphviz.org/ (дата обращения: 30.11.2022).
13. Open-Meteo. – URL: https://open-meteo.com/en/docs (дата обращения: 20.11.2022).
14. Калькулятор справочный портал: Паскаль в миллиметр ртутного столба. – URL: https://www.calc.ru/paskal-v-millimetr-rtutnogo-stolba.html (дата обращения: 20.11.2022).
15. Chart.js. – URL: https://www.chartjs.org/docs/latest/ (дата обращения: 20.11.2022).
16. mdn web docs: checkbox. – URL:  https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/checkbox (дата обращения: 01.11.2022).
17. mdn web docs: display. – URL: https://developer.mozilla.org/ru/docs/Web/CSS/display (дата обращения: 15.10.2022).
18. Stack overflow: What is hamburger menu and what is it used for? – URL: https://stackoverflow.com/questions/39999153/what-is-a-hamburger-menu-and-what-is-it-used-for (дата обращения: 01.11.2022).
19. Mediudm: как создать адаптивную сетку. – URL: https://medium.com/web-standards/responsive-grid-system-89d07e48a564 (дата обращения: 14.11.2022).
20. mdn web docs: font-size. – URL:  https://developer.mozilla.org/en-US/docs/Web/CSS/font-size (дата обращения: 15.11.2022).
21. BrowserStack Live. – URL:  https://live.browserstack.com/dashboard#os=OS+X&os_version=Ventura&browser=Safari&browser_version=16.0&zoom_to_fit=true&full_screen=true&url=http%3A%2F%2F127.0.0.1%3A5500%2Ftwoweeks.html&speed=1 (дата обращения: 29.11.2022).
ПРИЛОЖЕНИЕ А
Листинг 1
function renderRandForecast(data) {
  let forecastDataContainer = document.querySelector(".forecast");
  let accurateMaxTemp = [
    ...document.querySelectorAll(".forecast__max__temperature"),
  ];
  let avarageMaxTemp = accurateMaxTemp.reduce(
    (sum, current, index) =>
      index == 0
        ? (sum * (index + 1) + parseInt(current.innerHTML.slice(4, -1))) /
          (index + 2)
        : (sum * (index + 1) + parseInt(current.innerHTML.slice(0, -1))) /
          (index + 2),
    0
  );
  let averageMaxTempAmplitude = getAverageHtmlAmplitude(accurateMaxTemp);
  let accurateMinTemp = [
    ...document.querySelectorAll(".forecast__min__temperature"),
  ];
  let avarageMinTemp = accurateMinTemp.reduce(
    (sum, current, index) =>
      index == 0
        ? (sum * (index + 1) + parseInt(current.innerHTML.slice(4, -1))) /
          (index + 2)
        : (sum * (index + 1) + parseInt(current.innerHTML.slice(0, -1))) /
          (index + 2),
    0
  );
  let averageMinTempAmplitude = getAverageHtmlAmplitude(accurateMinTemp);
  let forecasts = forecastDataContainer.innerHTML;
  let avgWeathercode = data.daily.weathercode.reduce(
    (sum, current, index) =>
      (sum * (index + 1) + parseInt(current)) / (index + 2),
    0
  );
  let avgWeathercodeAmplitude = getAverageAmplitude(data.daily.weathercode); //data.daily.weathercode[i];
  Math.seedrandom(new Date().getDate());
  for (let i = 0; i < 8; i++) {
    tmp = (
      Math.floor(avgWeathercode) +
      Math.floor(Math.random() * avgWeathercodeAmplitude)
    ).toFixed();
    //Иконки
    let icon;
    if (tmp == "0") icon = "01d";
    else if (tmp == "1" || tmp == "2") icon = "02d";
    else if (tmp == "3" || parseInt(tmp) < parseInt("45")) icon = "03d";
    else if (
      tmp == "45" ||
      (parseInt(tmp) > parseInt("45") && parseInt(tmp) < parseInt("48")) ||
      tmp == "48" ||
      parseInt(tmp) < parseInt("51")
    )
      icon = "50d";
    else if (
      tmp == "51" ||
      (parseInt(tmp) > parseInt("51") && parseInt(tmp) < parseInt("53")) ||
      tmp == "53" ||
      (parseInt(tmp) > parseInt("53") && parseInt(tmp) < parseInt("55")) ||
      tmp == "55" ||
      tmp == "56" ||
      tmp == "57" ||
      parseInt(tmp) < parseInt("61")
    )
      icon = "10d";
    else if (
      tmp == "61" ||
      (parseInt(tmp) > parseInt("61") && parseInt(tmp) < parseInt("63")) ||
      tmp == "63" ||
      (parseInt(tmp) > parseInt("63") && parseInt(tmp) < parseInt("65")) ||
      tmp == "65" ||
      tmp == "66" ||
      tmp == "67" ||
      parseInt(tmp) < parseInt("71")
    )
      icon = "09d";
    else if (
      tmp == "71" ||
      (parseInt(tmp) > parseInt("71") && parseInt(tmp) < parseInt("73")) ||
      tmp == "73" ||
      (parseInt(tmp) > parseInt("73") && parseInt(tmp) < parseInt("73")) ||
      tmp == "75" ||
      tmp == "76" ||
      tmp == "77"
    )
      icon = "13d";
    //Макс мин температура
    let max_temp =
      Math.floor(avarageMaxTemp) +
      Math.floor(
        Math.random() * averageMaxTempAmplitude * 2 - averageMaxTempAmplitude
      ); 
    let min_temp =
      Math.floor(avarageMinTemp) +
      Math.floor(
        Math.random() * averageMinTempAmplitude * 2 - averageMinTempAmplitude
      );

    //Дни недели
    let weekDay = getWeekDay(new Date().getDay() + 7 + i);

    //Дни + название месяца
    date.setDate(date.getDate() + 7 + i);
    let day = date.getDate() + " " + getMounthName(date.getMonth());
    date.setDate(date.getDate() - 7 - i);

    //Добавление в прогноз
    let template = `<div class="forecast__item">
        <div class="forecast__time">${weekDay}</div>
        <div class="forecast__day" style="opacity: 0.7;">${day}</div>
        <div class="forecast__icon icon__${icon}"></div>
        <div class="forecast__max__temperature">${max_temp}</div>
        <div class="forecast__min__temperature" style="opacity: 0.7">${min_temp}</div>
      </div>`;
    forecasts += template;
  }
  forecastDataContainer.innerHTML = forecasts;
}
Листинг 2
function getGradient(ctx, chartArea) {
  const chartWidth = chartArea.right - chartArea.left;
  const chartHeight = chartArea.bottom - chartArea.top;
  if (!gradient || width !== chartWidth || height !== chartHeight) {
    // Create the gradient because this is either the first render
    // or the size of the chart has changed
    width = chartWidth;
    height = chartHeight;
    gradient = ctx.createLinearGradient(0, chartArea.bottom, 0, chartArea.top);
    gradient.addColorStop(0, "rgba(255,207,72,0.8)");
    gradient.addColorStop(0.5, "rgba(255,140,0,0.8)");
    gradient.addColorStop(1, "rgba(246,71,71,0.8)");
  }

  return gradient;
}
function renderSunriseCanvas(data) {
  const DATA_COUNT = 14;
  const NUMBER_CFG = { count: DATA_COUNT, min: -100, max: 100 };
  const labels = [...document.querySelectorAll(".forecast__time")].map(
    (item, index) =>
      item.innerHTML +
      "\n" +
      [...document.querySelectorAll(".forecast__day")][index].innerHTML
  );
  let sunrises = [];
  let sunrisesDate = [];
  let sunsets = [];
  let sunsetsDate = [];
  let avgSunrisesAmplitude;
  let avgSunsetsAmplitude;
  for (let i = 0; i < labels.length; i++) {
    if (i < 7) {
      sunrises.push(data.daily.sunrise[i].slice(-5));
      date = new Date(data.daily.sunrise[i]);
      sunrisesDate.push(new Date(date));
    } else {
      avgSunrisesAmplitude = getAverageAmplitude(
        sunrisesDate.map((item) => item.getHours() * 60 + item.getMinutes())
      );
      date = new Date(sunrisesDate[i - 1]);
      date.setMinutes(date.getMinutes() - avgSunrisesAmplitude);
      date.setDate(date.getDate() + 1);
      sunrises.push(date.getHours().pad() + ":" + date.getMinutes().pad());
      sunrisesDate.push(new Date(date));
    }
  }
  for (let i = 0; i < labels.length; i++) {
    if (i < 7) {
      sunsets.push(data.daily.sunset[i].slice(-5));
      date = new Date(data.daily.sunset[i]);
      sunsetsDate.push(new Date(date));
    } else {
      avgSunsetsAmplitude = getAverageAmplitude(
        sunsetsDate.map((item) => item.getHours() * 60 + item.getMinutes())
      );
      date = new Date(sunsetsDate[i - 1]);
      date.setMinutes(date.getMinutes() - avgSunsetsAmplitude);
      date.setDate(date.getDate() + 1);
      sunsets.push(date.getHours().pad() + ":" + date.getMinutes().pad());
      sunsetsDate.push(new Date(date));
    }
  }
  const datas = {
    datasets: [
      {
        label: "Восход и заход",
        data: labels.map((item, index) => {
          let date = new Date();
          let from =
            date.toISOString().slice(0, 10) +
            sunrisesDate[index].toISOString().slice(10, -5);
          let to =
            date.toISOString().slice(0, 10) +
            sunsetsDate[index].toISOString().slice(10, -5);
          return {
            y: [from, to],
            x: sunrisesDate[index].toISOString().slice(0, 11) + "00:00",
          };
        }),
        // backgroundColor: 'rgba(255,140,0,0.5)',
        backgroundColor: function (context) {
          const chart = context.chart;
          const { ctx, chartArea } = chart;

          if (!chartArea) {
            // This case happens on initial chart load
            return;
          }
          return getGradient(ctx, chartArea);
        },
        borderColor: "rgba(255,100,0,0.8)",
        borderWidth: 1,
        borderRadius: 10,
        borderSkipped: false,
      },
    ],
  };
  let i = 0;
  const config = {
    type: "bar",
    data: datas,
    options: {
      layout: {
        autoPadding: true,
      },
      maintainAspectRatio: false,
      scales: {
        y: {
          type: "time",
          time: {
            unit: "hour",
          },
          parsing: false,
          beginAtZero: true,
          display: false,
        },
        x: {
          grid: {
            offset: true,
          },
          parsing: false,
          type: "time",
          time: {
            unit: "day",
          },
          display: false,
        },
      },
      plugins: {
        tooltip: {
          backgroundColor: "transparent",
          displayColors: false,
          bodyFontSize: 14,
          footerFont: {
            weight: "normal",
          },
          callbacks: {
            label: function (item, data) {
              return (
                "Заход: " +
                new Intl.DateTimeFormat("ru", {
                  hour: "numeric",
                  minute: "numeric",
                }).format(sunsetsDate[item.dataIndex])
              );
            },
            title: function (item, data) {
              return labels[item[0].dataIndex];
            },
            footer: function (item, data) {
              return (
                "Восход: " +
                new Intl.DateTimeFormat("ru", {
                  hour: "numeric",
                  minute: "numeric",
                }).format(sunrisesDate[item[0].dataIndex])
              );
            },
          },
        },
        title: {
          display: false,
          text: "Восходы и заходы солнца",
          align: "start",
          color: "rgba(255,255,255,1)",
          font: {
            size: 24,
          },
        },

        legend: {
          display: false,
        },
      },
    },
  };

  window.chart = new Chart(document.getElementById("canvas_sunrise"), config);
}
Листинг 3
  .navbar__menu {
    display: none;
  }
  .header__burger {
    display: block;
    position: absolute;
    width: 20px;
    min-width: 10px;
    height: 20px;
    z-index: 3;
  }
  .header__burger span {
    position: absolute;
    background-color: white;
    left: 0;
    width: 100%;
    height: 2px;
    top: 8px;
  }
  .btn10 {
    position: absolute;
    width: 15px;
    height: 15px;
    vertical-align: middle;
    transition-duration: 0.5s;
    z-index: 3;
  }
  .btn10 .icon {
    transition-duration: 0.5s;
    position: absolute;
    height: 2px;
    width: 20px;
    top: 7px;
    background-color: white;
  }
  .btn10 .icon:before {
    transition-duration: 0.5s;
    position: absolute;
    width: 15px;
    height: 2px;
    background-color: white;
    content: "";
    top: -7px;
  }
  .btn10 .icon:after {
    transition-duration: 0.5s;
    position: absolute;
    width: 15px;
    height: 2px;
    background-color: white;
    content: "";
    top: 7px;
  }
  .container .checkbox {
    display: block;
    position: absolute;
    display: block;
    height: 15px;
    width: 15px;
    z-index: 5;
    opacity: 0;
    cursor: pointer;
  }
  .menu__background {
    position: relative;
    margin-top: -39px;
    padding-top: 39px;
    width: 100%;
    height: 0em;
    display: flex;
    flex-direction: column;
    z-index: 1;
    transition: all 0.4s ease-in-out;
    overflow: hidden;
    background: rgb(40, 109, 141, 1);
    border-radius: 10px;
    box-shadow: 0px 2px 3px #215973;
    animation: burgerBackgroundClose__Ani 0.4s forwards normal;
  }
  @keyframes burgerBackgroundClose__Ani {
    0% {
      height: 17em;
    }
    100% {
      height: 0;
    }
  }
  @keyframes burgerBackground__Ani {
    0% {
      height: 0;
    }
    100% {
      height: 17em;
    }
  }
  .weather .menu__items {
    width: 100%;
    padding: 1em 0;
    display: flex;
    position: relative;
    flex-direction: column;
    justify-content: space-between;
    z-index: 4;
    text-align: center;
  }
  .menu__background li {
    transition: all 400ms ease-in-out;
    padding: 13.3px 0;
    margin: auto;
    margin-bottom: 0;
    list-style: none;
    opacity: 1;
    width: 100%;
    box-sizing: border-box;
    animation: 0.85s forwards normal;
    white-space: nowrap;
  }
  .menu__background li a {
    color: #ffffff;
    text-decoration: none;
    transition: all 0.4s ease-in-out;
    font-size: 16px;
    opacity: 0.6;
    box-sizing: border-box;
  }
  .menu__background .menu__items li a:hover {
    opacity: 1;
  }
  .container input[type="checkbox"]:checked ~ .menu__background li {
    opacity: 1;
  }
  @keyframes burgerMenu__Ani {
    0% {
      scale: 0;
    }
    50% {
      scale: 0;
    }
    76% {
      scale: 1.2;
    }
    100% {
      scale: 1;
    }
  }
  .container input[type="checkbox"]:checked ~ .btn10 .icon {
    transition-duration: 0.5s;
    transform: rotateZ(-90deg) scaleX(0.75);
  }
  .container input[type="checkbox"]:checked ~ .btn10 .icon:before {
    transform: rotateZ(-45deg) scaleX(0.6) translate(-10.4px, 0px);
  }
  .container input[type="checkbox"]:checked ~ .btn10 .icon:after {
    transform: rotateZ(45deg) scaleX(0.6) translate(-10.4px, 0px);
  }

